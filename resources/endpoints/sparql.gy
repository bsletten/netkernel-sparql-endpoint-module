import java.net.*
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.query.*;
import org.netkernel.layer0.representation.*;
import org.netkernel.rdf.jena.rep.*;

def determineMIMEType(defaultMIMEType) {
	requestedMIMEType = context.source("httpRequest:/header/Accept")
	
	if(requestedMIMEType == null || requestedMIMEType.equals("*/*")) {
		requestedMIMEType = defaultMIMEType
	} else if(requestedMIMEType.contains("text/html")) {
		requestedMIMEType = "text/plain"
	}
	
	requestedMIMEType
}

def serializeRDF(requestedMIMEType, model) {
	serializer = null
	
	switch(requestedMIMEType) {
		case "application/rdf+xml":
		serializer="active:jRDFSerializeXML"
		break;
		case "application/n3":
		serializer="active:jRDFSerializeN3"
		break;
		case "text/plain":
		serializer="active:jRDFSerializeN-TRIPLE"
		break;
		case "text/turtle":
		serializer="active:jRDFSerializeTURTLE"
		break;
		default :
		break;
	}
	
	resp = null
	
	if(serializer != null) {
		println model.getModel()
	  req = context.createRequest(serializer)
	  req.addArgumentByValue("operand", model) //new JenaModelRepresentation(model))
	  resp = context.issueRequest(req)
	}
	
	resp
}

def serializeResultSet(requestedMIMEType, results) {
	resp = null
	
	switch(requestedMIMEType) {
		case "application/sparql-results+xml":
		  resp = ResultSetFormatter.asXMLString(results)		
		break;
		case "application/sparql-results+json":
		  baos = new ByteArrayOutputStream()
		  ResultSetFormatter.outputAsJSON(baos, results)
		  resp = new String(baos.toByteArray())
		break;
		case "text/csv":
		  baos = new ByteArrayOutputStream()
		  ResultSetFormatter.outputAsCSV(baos, results)
		  resp = new String(baos.toByteArray())		
		break;
		case "text/plain":
		  resp = ResultSetFormatter.asText(results)
		default:
		break;
	}
	
	resp
}

parms = context.source("httpRequest:/params")
defaultGraphParams = parms.getNodes("/default-graph-uri")
namedGraphParams = parms.getNodes("/named-graph-uri")

defaultGraphs = []
namedGraphs = []

defaultGraphParams.each { d ->
	defaultGraphs.add(d.value)
}

namedGraphParams.each { n->
	namedGraphs.add(n.value)
}

query = parms.getFirstNode("/query").value

println "QUERY: " + query

if(query == null) {
	// Check the body
} else {
	// Unescape it
	// TODO: Pull the encoding from the HTTP params?
	query = URLDecoder.decode(query, "UTF-8")
}

//encoded = URLEncoder.encode(query)
query = "data:text/plain,$query"

println "query: " + query

req = context.createRequest("active:sparql")
req.addArgument("query", query)

defaultGraphs.each { d->
	println ("AAAADING: $d")
	req.addArgument("default-graph-uri", d)
}

namedGraphs.each { n->
    req.addArgument("named-graph-uri", n)
}

result = context.issueRequest(req)
resp = null
mimeType = null

switch(result.getClass()) {
	case JenaModelRepresentation.class :
	  mimeType = determineMIMEType("application/rdf+xml")	
	  resp = serializeRDF(mimeType, result)
	println "RRRR"	+ resp
	break;
	default :
		println result
		if(ResultSet.class.isAssignableFrom(result.getClass())) {
			//print ResultSetFormatter.asXMLString(result)
			mimeType = determineMIMEType("application/sparql-results+xml")
			println mimeType
			resp = serializeResultSet(mimeType, result)	
			println resp
		}
	println "CLASS: " + result.getClass()
	break;
}

resp = context.createResponseFrom(resp)

if(mimeType != null) {
   resp.setMimeType(mimeType)
} else {
  // TODO: 415 handling
}